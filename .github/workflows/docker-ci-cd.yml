name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:latest
          platforms: linux/amd64,linux/arm64

      - name: Setup environment files
        env:
          ENV_PRODUCTION: ${{ secrets.ENV_PRODUCTION }}
        run: |
          echo "$ENV_PRODUCTION" > .env.production
          cp .env.production .env

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            NODE_ENV=production
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            zx8086/capella-document-search:latest
            zx8086/capella-document-search:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          provenance: false

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: zx8086/capella-document-search:latest
          args: --file=Dockerfile --severity-threshold=high

      - name: Test container
        if: github.event_name != 'pull_request'
        run: |
          docker run -d -p 3000:3000 -e NODE_ENV=production zx8086/capella-document-search:latest

      - name: Cleanup
        if: always()
        run: |
          rm -f .env .env.production
          docker image prune -f
          docker volume prune -f
          echo "Cleanup completed"
