name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: bun install

      - name: Create .env file
        run: |
          cat << EOF > .env
          ENABLE_FILE_LOGGING=true
          LOG_LEVEL=info
          LOG_MAX_SIZE=20m
          LOG_MAX_FILES=14d
          GRAPHQL_ENDPOINT=http://localhost:4000/graphql
          DB_DATA_DIR=src/data
          VITE_FILE_UPLOAD_LIMIT=50
          API_BASE_URL=https://cloudapi.cloud.couchbase.com/v4
          ENABLE_OPENTELEMETRY=true
          SERVICE_NAME="Capella Document Search"
          SERVICE_VERSION=1.0.0
          DEPLOYMENT_ENVIRONMENT=production
          TRACES_ENDPOINT=https://otel-http-traces.siobytes.com
          METRICS_ENDPOINT=https://otel-http-metrics.siobytes.com
          LOGS_ENDPOINT=https://otel-http-logs.siobytes.com
          METRIC_READER_INTERVAL=1800000
          CONSOLE_METRIC_READER_INTERVAL=1800000
          VITE_OPENREPLAY_INGEST_POINT=https://api.openreplay.com/ingest
          VITE_ELASTIC_APM_SERVICE_NAME="Capella Document Search"
          VITE_ELASTIC_APM_SERVER_URL=https://apm.siobytes.com
          VITE_ELASTIC_APM_SERVICE_VERSION=1.0.0
          VITE_ELASTIC_APM_ENVIRONMENT=production
          VITE_ELASTIC_APM_DISTRIBUTED_TRACING_ORIGINS="['*']"
          ORG_ID=${{ secrets.ORG_ID }}
          PROJECT_ID=${{ secrets.PROJECT_ID }}
          CLUSTER_ID=${{ secrets.CLUSTER_ID }}
          BUCKET_ID=${{ secrets.BUCKET_ID }}
          AUTH_TOKEN=${{ secrets.AUTH_TOKEN }}
          VITE_OPENREPLAY_PROJECT_KEY=${{ secrets.VITE_OPENREPLAY_PROJECT_KEY }}
          EOF

      - name: Run Snyk checks
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          export $(grep -v '^#' .env | xargs)
          bun run snyk test --file=package.json --sarif-file-output=snyk.sarif || true
          bun run snyk monitor --file=package.json || true

      - name: Upload Snyk scan results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-code

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: zx8086/capella-document-search:latest
          build-args: |
            ENABLE_FILE_LOGGING=true
            LOG_LEVEL=info
            LOG_MAX_SIZE=20m
            LOG_MAX_FILES=14d
            GRAPHQL_ENDPOINT=http://localhost:4000/graphql
            DB_DATA_DIR=src/data
            VITE_FILE_UPLOAD_LIMIT=50
            API_BASE_URL=https://cloudapi.cloud.couchbase.com/v4
            ENABLE_OPENTELEMETRY=true
            SERVICE_NAME=Capella Document Search
            SERVICE_VERSION=1.0.0
            DEPLOYMENT_ENVIRONMENT=production
            TRACES_ENDPOINT=https://otel-http-traces.siobytes.com
            METRICS_ENDPOINT=https://otel-http-metrics.siobytes.com
            LOGS_ENDPOINT=https://otel-http-logs.siobytes.com
            METRIC_READER_INTERVAL=1800000
            CONSOLE_METRIC_READER_INTERVAL=1800000
            VITE_OPENREPLAY_INGEST_POINT=https://api.openreplay.com/ingest
            VITE_ELASTIC_APM_SERVICE_NAME=Capella Document Search
            VITE_ELASTIC_APM_SERVER_URL=https://apm.siobytes.com
            VITE_ELASTIC_APM_SERVICE_VERSION=1.0.0
            VITE_ELASTIC_APM_ENVIRONMENT=production
            VITE_ELASTIC_APM_DISTRIBUTED_TRACING_ORIGINS="['*']"
          secrets: |
            "org_id=${{ secrets.ORG_ID }}"
            "project_id=${{ secrets.PROJECT_ID }}"
            "cluster_id=${{ secrets.CLUSTER_ID }}"
            "bucket_id=${{ secrets.BUCKET_ID }}"
            "auth_token=${{ secrets.AUTH_TOKEN }}"
            "openreplay_key=${{ secrets.VITE_OPENREPLAY_PROJECT_KEY }}"

      - name: Run Snyk to check Docker image for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          docker run --rm -e SNYK_TOKEN -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/app snyk/snyk:docker snyk container test zx8086/capella-document-search:latest --file=/app/Dockerfile --severity-threshold=high --sarif-file-output=/app/snyk-docker.sarif || true

      - name: Run Snyk monitor for Docker image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          docker run --rm -e SNYK_TOKEN -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/app snyk/snyk:docker snyk container monitor zx8086/capella-document-search:latest --file=/app/Dockerfile || true

      - name: Upload Docker Snyk scan results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-docker.sarif
          category: snyk-docker

      - name: Deploy container
        run: |
          docker stop capella-document-search || true
          docker rm capella-document-search || true
          docker run -d --name capella-document-search \
            -p 3000:3000 \
            --env-file .env \
            -e HEALTH_CHECK_PORT=3000 \
            zx8086/capella-document-search:latest
