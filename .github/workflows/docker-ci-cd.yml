name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:latest
          platforms: linux/amd64,linux/arm64

      - name: Create .env file (like our docker:prod:env script)
        run: |
          cat << EOF > .env.production
          ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
          LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
          GRAPHQL_ENDPOINT=${{ vars.GRAPHQL_ENDPOINT }}
          DB_DATA_DIR=${{ vars.DB_DATA_DIR }}
          PUBLIC_CSV_FILE_UPLOAD_LIMIT=${{ vars.PUBLIC_CSV_FILE_UPLOAD_LIMIT }}
          PUBLIC_VIDEO_BASE_URL=${{ vars.PUBLIC_VIDEO_BASE_URL }}
          API_BASE_URL=${{ vars.API_BASE_URL }}
          ORG_ID=${{ vars.ORG_ID }}
          PROJECT_ID=${{ vars.PROJECT_ID }}
          CLUSTER_ID=${{ vars.CLUSTER_ID }}
          BUCKET_ID=${{ vars.BUCKET_ID }}
          AUTH_TOKEN=${{ vars.AUTH_TOKEN }}
          ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
          SERVICE_NAME=${{ vars.SERVICE_NAME }}
          SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
          TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
          METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
          LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
          METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
          CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
          SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
          PUBLIC_OPENREPLAY_PROJECT_KEY=${{ vars.PUBLIC_OPENREPLAY_PROJECT_KEY }}
          PUBLIC_OPENREPLAY_INGEST_POINT=${{ vars.PUBLIC_OPENREPLAY_INGEST_POINT }}
          PUBLIC_ELASTIC_APM_SERVICE_NAME=${{ vars.PUBLIC_ELASTIC_APM_SERVICE_NAME }}
          PUBLIC_ELASTIC_APM_SERVER_URL=${{ vars.PUBLIC_ELASTIC_APM_SERVER_URL }}
          PUBLIC_ELASTIC_APM_SERVICE_VERSION=${{ vars.PUBLIC_ELASTIC_APM_SERVICE_VERSION }}
          PUBLIC_ELASTIC_APM_ENVIRONMENT=production
          EOF

      - name: Copy .env.production to .env (matching our local pattern)
        run: cp .env.production .env

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            NODE_ENV=production
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            zx8086/capella-document-search:latest
            zx8086/capella-document-search:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=zx8086/capella-document-search:buildcache
          cache-to: type=registry,ref=zx8086/capella-document-search:buildcache,mode=max
          provenance: false

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: zx8086/capella-document-search:latest
          args: --file=Dockerfile --severity-threshold=high

      - name: Test container
        if: github.event_name != 'pull_request'
        run: |
          docker run -d -p 3000:3000 -e NODE_ENV=production zx8086/capella-document-search:latest

      - name: Cleanup
        if: always()
        run: |
          rm -f .env
          docker image prune -f
          docker volume prune -f
          echo "Cleanup completed"
