name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies and run post-install scripts
        run: |
          bun install
          bun pm untrusted || true
          bun pm trust --all || true

      - name: Debug .env file
        run: |
          echo "Contents of .env file:"
          cat .env

      - name: Create .env file
        run: |
          cat << EOF > .env
          ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
          LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
          GRAPHQL_ENDPOINT=${{ vars.GRAPHQL_ENDPOINT }}
          DB_DATA_DIR=${{ vars.DB_DATA_DIR }}
          PUBLIC_CSV_FILE_UPLOAD_LIMIT=${{ vars.PUBLIC_CSV_FILE_UPLOAD_LIMIT }}
          API_BASE_URL=${{ vars.API_BASE_URL }}
          ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
          SERVICE_NAME=${{ vars.SERVICE_NAME }}
          SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
          DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
          TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
          METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
          LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
          METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
          CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
          SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
          PUBLIC_OPENREPLAY_INGEST_POINT=${{ vars.PUBLIC_OPENREPLAY_INGEST_POINT }}
          PUBLIC_ELASTIC_APM_SERVICE_NAME=${{ vars.PUBLIC_ELASTIC_APM_SERVICE_NAME }}
          PUBLIC_ELASTIC_APM_SERVER_URL=${{ vars.PUBLIC_ELASTIC_APM_SERVER_URL }}
          PUBLIC_ELASTIC_APM_SERVICE_VERSION=${{ vars.PUBLIC_ELASTIC_APM_SERVICE_VERSION }}
          PUBLIC_ELASTIC_APM_ENVIRONMENT=${{ vars.PUBLIC_ELASTIC_APM_ENVIRONMENT }}
          EOF

      - name: Run Snyk checks
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          export $(grep -v '^#' .env | xargs)
          bun run snyk test --file=package.json --sarif-file-output=snyk.sarif
          bun run snyk monitor --file=package.json

      - name: Upload Snyk scan results to GitHub Code Scanning
        if: hashFiles('snyk.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-code

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "zx8086/cldbuild"
          install: true

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: zx8086/capella-document-search:latest
          platforms: linux/arm64,linux/amd64
          target: release
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}
          build-args: |
            ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
            LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
            GRAPHQL_ENDPOINT=${{ vars.GRAPHQL_ENDPOINT }}
            DB_DATA_DIR=${{ vars.DB_DATA_DIR }}
            PUBLIC_CSV_FILE_UPLOAD_LIMIT=${{ vars.PUBLIC_CSV_FILE_UPLOAD_LIMIT }}
            API_BASE_URL=${{ vars.API_BASE_URL }}
            ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
            SERVICE_NAME=${{ vars.SERVICE_NAME }}
            SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
            DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
            TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
            METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
            LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
            METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
            CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
            SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
            PUBLIC_OPENREPLAY_INGEST_POINT=${{ vars.PUBLIC_OPENREPLAY_INGEST_POINT }}
            PUBLIC_ELASTIC_APM_SERVICE_NAME=${{ vars.PUBLIC_ELASTIC_APM_SERVICE_NAME }}
            PUBLIC_ELASTIC_APM_SERVER_URL=${{ vars.PUBLIC_ELASTIC_APM_SERVER_URL }}
            PUBLIC_ELASTIC_APM_SERVICE_VERSION=${{ vars.PUBLIC_ELASTIC_APM_SERVICE_VERSION }}
            PUBLIC_ELASTIC_APM_ENVIRONMENT=${{ vars.PUBLIC_ELASTIC_APM_ENVIRONMENT }}
          secrets: |
            "org_id=${{ secrets.ORG_ID }}"
            "project_id=${{ secrets.PROJECT_ID }}"
            "cluster_id=${{ secrets.CLUSTER_ID }}"
            "bucket_id=${{ secrets.BUCKET_ID }}"
            "auth_token=${{ secrets.AUTH_TOKEN }}"
            "openreplay_key=${{ secrets.PUBLIC_OPENREPLAY_PROJECT_KEY }}"

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          docker run --rm -e SNYK_TOKEN -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/app snyk/snyk:docker snyk container test zx8086/capella-document-search:latest --file=/app/Dockerfile --severity-threshold=high --sarif-file-output=/app/snyk-docker.sarif

      - name: Upload Docker Snyk scan results to GitHub Code Scanning
        if: hashFiles('snyk-docker.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-docker.sarif
          category: snyk-docker

      - name: Cleanup
        if: always()
        run: |
          rm -f .env
          rm -f snyk.sarif snyk-docker.sarif
          docker image prune -f
          docker volume prune -f

      - name: Inspect Docker image
        run: |
          docker image inspect zx8086/capella-document-search:latest
          docker history zx8086/capella-document-search:latest
