name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies and run post-install scripts
        run: |
          bun install
          bun pm untrusted || true
          bun pm trust --all || true

      - name: Create .env file
        run: |
          cat << EOF > .env
          ENABLE_FILE_LOGGING=${{ vars.ENABLE_FILE_LOGGING }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          LOG_MAX_SIZE=${{ vars.LOG_MAX_SIZE }}
          LOG_MAX_FILES=${{ vars.LOG_MAX_FILES }}
          GRAPHQL_ENDPOINT=${{ vars.GRAPHQL_ENDPOINT }}
          DB_DATA_DIR=${{ vars.DB_DATA_DIR }}
          PUBLIC_CSV_FILE_UPLOAD_LIMIT=${{ vars.PUBLIC_CSV_FILE_UPLOAD_LIMIT }}
          PUBLIC_VIDEO_BASE_URL=${{ vars.PUBLIC_VIDEO_BASE_URL }}
          API_BASE_URL=${{ vars.API_BASE_URL }}
          ORG_ID=${{ vars.ORG_ID }}
          PROJECT_ID=${{ vars.PROJECT_ID }}
          CLUSTER_ID=${{ vars.CLUSTER_ID }}
          BUCKET_ID=${{ vars.BUCKET_ID }}
          ENABLE_OPENTELEMETRY=${{ vars.ENABLE_OPENTELEMETRY }}
          SERVICE_NAME=${{ vars.SERVICE_NAME }}
          SERVICE_VERSION=${{ vars.SERVICE_VERSION }}
          DEPLOYMENT_ENVIRONMENT=${{ vars.DEPLOYMENT_ENVIRONMENT }}
          TRACES_ENDPOINT=${{ vars.TRACES_ENDPOINT }}
          METRICS_ENDPOINT=${{ vars.METRICS_ENDPOINT }}
          LOGS_ENDPOINT=${{ vars.LOGS_ENDPOINT }}
          METRIC_READER_INTERVAL=${{ vars.METRIC_READER_INTERVAL }}
          CONSOLE_METRIC_READER_INTERVAL=${{ vars.CONSOLE_METRIC_READER_INTERVAL }}
          SUMMARY_LOG_INTERVAL=${{ vars.SUMMARY_LOG_INTERVAL }}
          PUBLIC_OPENREPLAY_INGEST_POINT=${{ vars.PUBLIC_OPENREPLAY_INGEST_POINT }}
          PUBLIC_ELASTIC_APM_SERVICE_NAME=${{ vars.PUBLIC_ELASTIC_APM_SERVICE_NAME }}
          PUBLIC_ELASTIC_APM_SERVER_URL=${{ vars.PUBLIC_ELASTIC_APM_SERVER_URL }}
          PUBLIC_ELASTIC_APM_SERVICE_VERSION=${{ vars.PUBLIC_ELASTIC_APM_SERVICE_VERSION }}
          PUBLIC_ELASTIC_APM_ENVIRONMENT=${{ vars.PUBLIC_ELASTIC_APM_ENVIRONMENT }}
          EOF

      - name: Run Snyk checks
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          export $(grep -v '^#' .env | xargs)
          bun run snyk test --file=package.json --sarif-file-output=snyk.sarif
          bun run snyk monitor --file=package.json

      - name: Upload Snyk scan results to GitHub Code Scanning
        if: hashFiles('snyk.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-code

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "zx8086/cldbuild"
          install: true

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: zx8086/capella-document-search:latest
          platforms: linux/arm64,linux/amd64
          target: release
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}
          build-args: |
            ENABLE_FILE_LOGGING=true
            LOG_LEVEL=info
            LOG_MAX_SIZE=20m
            LOG_MAX_FILES=14d
            GRAPHQL_ENDPOINT=http://localhost:4000/graphql
            DB_DATA_DIR=src/data
            PUBLIC_CSV_FILE_UPLOAD_LIMIT=50
            PUBLIC_VIDEO_BASE_URL=
            API_BASE_URL=https://cloudapi.cloud.couchbase.com/v4
            ORG_ID=your-org-id
            PROJECT_ID=your-project-id
            CLUSTER_ID=your-cluster-id
            BUCKET_ID=your-bucket-id
            ENABLE_OPENTELEMETRY=true
            SERVICE_NAME="Capella Document Search"
            SERVICE_VERSION=2.0.0
            DEPLOYMENT_ENVIRONMENT=production
            TRACES_ENDPOINT=https://your-traces-endpoint
            METRICS_ENDPOINT=https://your-metrics-endpoint
            LOGS_ENDPOINT=https://your-logs-endpoint
            METRIC_READER_INTERVAL=60000
            CONSOLE_METRIC_READER_INTERVAL=60000
            SUMMARY_LOG_INTERVAL=300000
            PUBLIC_OPENREPLAY_INGEST_POINT=https://your-openreplay-ingest-point
            PUBLIC_ELASTIC_APM_SERVICE_NAME="Capella Document Search"
            PUBLIC_ELASTIC_APM_SERVER_URL=https://your-apm-server-url
            PUBLIC_ELASTIC_APM_SERVICE_VERSION=2.0.0
            PUBLIC_ELASTIC_APM_ENVIRONMENT=production

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk container test zx8086/capella-document-search:latest --severity-threshold=high --sarif-file-output=snyk-docker.sarif --debug || true
          snyk container monitor zx8086/capella-document-search:latest || true

      - name: Upload Docker Snyk scan results to GitHub Code Scanning
        if: always() && hashFiles('snyk-docker.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-docker.sarif
          category: snyk-docker

      - name: Cleanup
        if: always()
        run: |
          rm -f .env
          rm -f snyk.sarif snyk-docker.sarif
          docker image prune -f
          docker volume prune -f
          echo "Cleanup completed"

      - name: Install latest Snyk
        run: |
          npm install -g snyk@latest
          snyk --version

      - name: Inspect Docker image
        run: |
          docker image inspect zx8086/capella-document-search:latest
          docker history zx8086/capella-document-search:latest
